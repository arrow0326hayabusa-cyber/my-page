// ==== breakpoints ====
@mixin pc-xl { @media (min-width: 1441px) { @content; } }
@mixin pc    { @media (max-width: 1440px) { @content; } }
@mixin sp    { @media (max-width: 450px)  { @content; } } // ←必要なら375pxに

// ==== bases ====
$pc-base: 1440;
$sp-base: 375;

// ==== px helper（リスト対応・非数値もパススルー）====
@function to-px($value) {
  @if type-of($value) == 'list' {
    $out: ();
    @each $item in $value {
      $out: append($out, to-px($item)); // space区切り
    }
    @return $out;
  } @else if type-of($value) == 'number' {
    @return if(unit($value) == "", $value * 1px, $value);
  } @else {
    @return $value;
  }
}

// ==== vw helper（スペース区切りの複数値に対応）====
@function calc-vw($n, $base) { @return calc(#{$n} / #{$base} * 100vw); }

@function to-vw($value, $base) {
    @if type-of($value) == 'list' {
      $sep: list-separator($value); // space/comma/slash を保持
      $out: ();
      @each $item in $value {
        // 単位なし数値だけ変換、単位付きや文字列はそのまま
        @if type-of($item) == 'number' and unit($item) == "" {
          $out: append($out, calc(#{$item} / #{$base} * 100vw), $sep);
        } @else {
          $out: append($out, $item, $sep);
        }
      }
      @return $out;
    } @else if type-of($value) == 'number' {
      @if unit($value) == "" {
        @return calc(#{$value} / #{$base} * 100vw);
      } @else {
        @return $value; // 例: 100%, 20px などは変換しない
      }
    } @else {
      @return $value; // auto / none / 文字列など
    }
  }

@function vw-pc($value) { @return to-vw($value, $pc-base); }
@function vw-sp($value) { @return to-vw($value, $sp-base); }

// ==== メインmixin ====
@mixin r($prop, $xl, $pc: $xl, $sp: $pc) {
  @include pc-xl { #{$prop}: vw-pc($xl); } // 複数値OK
  @include pc    { #{$prop}: vw-pc($pc); } // 複数値OK（単位なし数値で）
  @include sp    { #{$prop}: vw-sp($sp); } // 複数値OK（単位なし数値で）
}

// ==== よく使う ====
@mixin r-font($size-xl, $size-pc: $size-xl, $size-sp: $size-pc, $lh: null) {
  @include r(font-size, $size-xl, $size-pc, $size-sp);
  @if $lh != null { line-height: $lh; }
}